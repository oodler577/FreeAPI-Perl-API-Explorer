#!/usr/bin/perl -w -- 
#
# generated by wxGlade 1.1.0 on Mon Jan  6 02:04:40 2025
#
# To get wxPerl visit http://www.wxperl.it
#

use strict;
use threads;
use Wx;

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

package MyDialog;

use Wx qw[:everything];
use base qw(Wx::Dialog);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyDialog::new
    $style = wxDEFAULT_DIALOG_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetTitle("About My App");
    
    my $bitmap_1 = Wx::StaticBitmap->new($self, wxID_ANY, Wx::Bitmap->new("./PERL-logo-392C2FBE62-seeklogo.com.png", wxBITMAP_TYPE_ANY));
    $bitmap_1->SetMinSize(Wx::Size->new(433, 442));
    $self->Layout();
    # end wxGlade
    return $self;

}


# end of class MyDialog

1;

package MyFrame;

use Wx qw[:everything];
use base qw(Wx::Frame);
use strict;

sub new {
    my( $self, $parent, $id, $title, $pos, $size, $style, $name ) = @_;
    $parent = undef              unless defined $parent;
    $id     = -1                 unless defined $id;
    $title  = ""                 unless defined $title;
    $pos    = wxDefaultPosition  unless defined $pos;
    $size   = wxDefaultSize      unless defined $size;
    $name   = ""                 unless defined $name;

    # begin wxGlade: MyFrame::new
    $style = wxDEFAULT_FRAME_STYLE
        unless defined $style;

    $self = $self->SUPER::new( $parent, $id, $title, $pos, $size, $style, $name );
    $self->SetSize(Wx::Size->new(567, 475));
    $self->SetTitle("Some App to Do Stuff");
    
    

    # Menu Bar

    $self->{frame_menubar} = Wx::MenuBar->new();
    my $wxglade_tmp_menu;
    $wxglade_tmp_menu = Wx::Menu->new();
    $self->{about} = $wxglade_tmp_menu->Append(wxID_ANY, "About", "");
    $self->{quit} = $wxglade_tmp_menu->Append(wxID_ANY, "Quit", "");
    $self->{frame_menubar}->Append($wxglade_tmp_menu, "File");
    $self->SetMenuBar($self->{frame_menubar});
    
    # Menu Bar end

    
    $self->{panel_1} = Wx::Panel->new($self, wxID_ANY);
    $self->{panel_1}->SetMinSize(Wx::Size->new(850, 724));
    
    $self->{sizer_1} = Wx::GridBagSizer->new(0, 0);
    
    $self->{sizer_2} = Wx::StaticBoxSizer->new(Wx::StaticBox->new($self->{panel_1}, wxID_ANY, "Actions"), wxVERTICAL);
    $self->{sizer_1}->Add($self->{sizer_2}, Wx::GBPosition->new(0, 0), Wx::GBSpan->new(1, 1), wxEXPAND, 0);
    
    $self->{button_1} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "Chuck Norris");
    $self->{button_1}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_1}, 0, 0, 0);
    
    $self->{button_2} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "Stonks API");
    $self->{button_2}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_2}, 0, 0, 0);
    
    $self->{button_3} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "Dogs API");
    $self->{button_3}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_3}, 0, 0, 0);
    
    $self->{button_4} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "List APIs");
    $self->{button_4}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_4}, 0, 0, 0);
    
    $self->{button_6} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "About");
    $self->{button_6}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_6}, 0, 0, 0);
    
    $self->{button_5} = Wx::Button->new($self->{sizer_2}->GetStaticBox(), wxID_ANY, "Quit");
    $self->{button_5}->SetMinSize(Wx::Size->new(90, 23));
    $self->{sizer_2}->Add($self->{button_5}, 0, 0, 0);
    
    $self->{text_ctrl_1} = Wx::TextCtrl->new($self->{panel_1}, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, wxTE_BESTWRAP|wxTE_MULTILINE|wxTE_WORDWRAP);
    $self->{text_ctrl_1}->SetMinSize(Wx::Size->new(440, 400));
    $self->{sizer_1}->Add($self->{text_ctrl_1}, Wx::GBPosition->new(0, 1), Wx::GBSpan->new(1, 1), 0, 0);
    
    $self->{panel_1}->SetSizer($self->{sizer_1});
    
    $self->Layout();
    Wx::Event::EVT_MENU($self, $self->{about}->GetId, $self->can('showAboutModal'));
    Wx::Event::EVT_MENU($self, $self->{quit}->GetId, $self->can('onExit'));
    Wx::Event::EVT_BUTTON($self, $self->{button_1}->GetId, $self->can('getRandomQuote'));
    Wx::Event::EVT_BUTTON($self, $self->{button_2}->GetId, $self->can('getStonksInfo'));
    Wx::Event::EVT_BUTTON($self, $self->{button_3}->GetId, $self->can('getDogBreeds'));
    Wx::Event::EVT_BUTTON($self, $self->{button_4}->GetId, $self->can('getAPIList'));
    Wx::Event::EVT_BUTTON($self, $self->{button_6}->GetId, $self->can('showAboutModal'));
    Wx::Event::EVT_BUTTON($self, $self->{button_5}->GetId, $self->can('onExit'));

    # end wxGlade


    return $self;

}


sub getRandomQuote {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::getRandomQuote <event_handler>
    # end wxGlade
    $self->{worker_thread} = threads->create(
      sub {
        require Acme::Free::API::ChuckNorris;
        my $cnq = Acme::Free::API::ChuckNorris->new;
        my $category = "animal"; 
        my $quote = $cnq->random(category => $category);
        $self->{text_ctrl_1}->SetValue($quote);
      },
      $self
    );
}

sub showAboutModal {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::showAboutModal <event_handler>
    # end wxGlade
    my $aboutDialog = MyDialog->new();
    $aboutDialog->ShowModal;
}


sub onExit {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::onExit <event_handler>
    # end wxGlade
    $self->Close(1);  # This will close the main window and exit the event loop
}


sub getStonksInfo {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::getStonksInfo <event_handler>
    # end wxGlade
    $self->{worker_thread} = threads->create(
      sub {
        require Acme::Free::API::Stonks;
        my $stnk = Acme::Free::API::Stonks->new;
        my $quote = sprintf "%-5s %-8s %-4s %4s\n", "tick", "sentiment", "score", "comments"; 
        my $stonks = $stnk->stonks;
        foreach my $s (sort {$a->ticker cmp $b->ticker} $stonks->all) {
          $quote .= sprintf "%-5s %-8s % 4.3f % 4d\n", $s->ticker // "na", $s->sentiment // "unknown", $s->sentiment_score // "nan", $s->no_of_comments // "nan";
        }
        $self->{text_ctrl_1}->SetValue($quote);
      },
      $self
   );
}


sub getDogBreeds {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::getDogBreeds <event_handler>
    # end wxGlade
    $self->{worker_thread} = threads->create(
      sub {
        require Acme::Free::Dog::API;
        my $fletch = Acme::Free::Dog::API->new;
        my $dogs = $fletch->breeds;
        my $quote = sprintf "Found %d breeds ('+' indicates subbreeds exist)\n", scalar( keys %$dogs );
        foreach my $breed ( sort { $a cmp $b } keys %$dogs ) {
          $quote .= sprintf "%s%s\n", $breed, ( $dogs->$breed->all ) ? " +" : "";
        }
        $self->{text_ctrl_1}->SetValue($quote);
      },
      $self
   );
}


sub getAPIList {
    my ($self, $event) = @_;
    # wxGlade: MyFrame::getAPIList <event_handler>
    # end wxGlade
    $self->{worker_thread} = threads->create(
      sub {
        require Acme::Free::Public::APIs;
        my $quote = "";
        my $apis   = Acme::Free::Public::APIs->new->apis();
        foreach my $api (sort { $a->id <=> $b->id } ($apis->all)) {
          if (0) {
            my $out     = <<EOAPI;
id:            %d
title:         %s%s
site URL:      %s
methods:       %s 
health:        %d 
documentation: %s
description:   %s
EOAPI
            $quote .= sprintf $out, $api->id, ($api->emoji) ? sprintf("(%s) ",$api->emoji) : "",, $api->title, $api->source, $api->methods, $api->health, $api->documentation, $api->description;
          }
          else {
            $quote .= sprintf "% 4d % 4d %s\n", $api->id, $api->health, $api->title;
          }
        } 
        my $count = scalar ($apis->all);
        $quote .= sprintf "Found %d API%s\n", $count, ($count != 1) ? "s" : "";
        $self->{text_ctrl_1}->SetValue($quote);
      },
      $self
   );
}

# end of class MyFrame

1;

package MyApp;

use base qw(Wx::App);
use strict;

sub OnInit {
    my( $self ) = shift;

    Wx::InitAllImageHandlers();

    my $frame = MyFrame->new();

    $self->SetTopWindow($frame);
    $frame->Show(1);

    return 1;
}
# end of class MyApp

package main;

my $app = MyApp->new();
$app->MainLoop();
